#!/bin/bash

# Define blacklists to be checked
blacklists=(
    #'all.s5h.net'
    'b.barracudacentral.org'
    'bl.emailbasura.org'
    'bl.spamcannibal.org'
    'bl.spamcop.net'
    'blacklist.woody.ch'
    # 'bogons.cymru.com'
    'cbl.abuseat.org'
    # 'cdl.anti-spam.org.cn'
    'combined.abuse.ch'
    'db.wpbl.info'
    'dnsbl-1.uceprotect.net'
    'dnsbl-2.uceprotect.net'
    # 'dnsbl-3.uceprotect.net'
    'dnsbl.anticaptcha.net'
    'dnsbl.cyberlogic.net'
    'dnsbl.dronebl.org'
    'dnsbl.inps.de'
    #'dnsbl.sorbs.net'
    'drone.abuse.ch'
    'drone.abuse.ch'
    'duinv.aupads.org'
    #'dul.dnsbl.sorbs.net'
    'dyna.spamrats.com'
    'dynip.rothen.com'
    'exitnodes.tor.dnsbl.sectoor.de'
    'http.dnsbl.sorbs.net'
    'ips.backscatterer.org'
    'ix.dnsbl.manitu.net'
    'korea.services.net'
    'misc.dnsbl.sorbs.net'
    'noptr.spamrats.com'
    'orvedb.aupads.org'
    'pbl.spamhaus.org'
    'proxy.bl.gweep.ca'
    'psbl.surriel.com'
    'relays.bl.gweep.ca'
    'relays.nether.net'
    'sbl.spamhaus.org'
    'short.rbl.jp'
    # 'singular.ttk.pte.hu'
    'smtp.dnsbl.sorbs.net'
    'socks.dnsbl.sorbs.net'
    'spam.abuse.ch'
    'spam.dnsbl.sorbs.net'
    'spam.spamrats.com'
    # 'spambot.bls.digibase.ca'
    'spamrbl.imp.ch'
    'spamsources.fabel.dk'
    'ubl.lashback.com'
    'ubl.unsubscore.com'
    'virus.rbl.jp'
    'web.dnsbl.sorbs.net'
    'wormrbl.imp.ch'
    'xbl.spamhaus.org'
    'z.mailspike.net'
    'zen.spamhaus.org'
    'zombie.dnsbl.sorbs.net'
)

function check_if_valid_host_ip {
    local ip="$1"
    if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

function revert_ip {
    local ip="$1"
    IFS='.' read -r -a ip_parts <<< "$ip"
    echo "${ip_parts[3]}.${ip_parts[2]}.${ip_parts[1]}.${ip_parts[0]}"
}

function bls {
    local olist=("$@")
    local x=""
    for bl in "${olist[@]}"; do
        x+=" $bl"
    done
    echo "$x"
}

function log {
    local debug="$1"
    local s="$2"
    if [[ $debug == "true" ]]; then
        echo "$s"
    fi
}

function main {
    host=$(curl -s https://api.ipify.org)
    debug=false

    # Parse arguments
    while getopts ":H:dh" opt; do
        case "$opt" in
            H)
                host="$OPTARG"
                ;;
            d)
                debug=true
                ;;
            h)
                usage
                exit 2
                ;;
            \?)
                echo "Invalid option: -$OPTARG"
                exit 2
                ;;
            :)
                echo "Option -$OPTARG requires an argument."
                exit 2
                ;;
        esac
    done

    # Check if valid Host IP
    if ! check_if_valid_host_ip "$host"; then
        resolved_ip=$(getent ahosts "$host" | awk '{ print $1; exit }')
        if ! check_if_valid_host_ip "$resolved_ip"; then
            echo "Error: No valid IP address."
            exit 2
        else
            ip="$resolved_ip"
        fi
    else
        ip="$host"
    fi

    # Revert IP
    rip=$(revert_ip "$ip")

    # Init variables
    declare -a negative_result_buffer=()

    for bl in "${blacklists[@]}"; do
        # Init Result
        result=""
        # Build query string
        q="${rip}.${bl}"
        log "$debug" "$q"

        # Query DNS
        result=$(dig +short "$q" | grep "127.0.0")
        if [[ -n $result ]]; then
            log "$debug" "Found 127.0.0 in result."
            negative_result_buffer+=("$bl")
        fi
    done

    if [[ ${#negative_result_buffer[@]} -eq 0 ]]; then
        echo "0 Check_blocklist_IP - $ip"
        exit 0
    else
        echo "2 Check_blocklist_IP - $host ($ip) ist listed at: $(bls "${negative_result_buffer[@]}")"
        exit 2
    fi
}

main "$@"
